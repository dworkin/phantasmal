                      Installing Phantasmal

This document assumes you've already got DGD installed and working,
and you've tested it with the Kernel MUDLib.  A source installation
is always preferable for debugging, but the important thing is that
DGD works and that you've got the source to the Kernel MUDLib.  If
you haven't gotten DGD up and running, check out
"http://phantasmal.sourceforge.net/DGD" and click on "Downloading,
Compiling and Configuring DGD".  The DGD mailing list can also help
you with these setup problems.

You'll want to install your Kernel MUDLib (the mud/kernel subdirectory
under your DGD installation) into the kernel subdirectory of
Phantasmal.  You'll also want to copy files from the Kernel MUDLib
mud/include/kernel subdirectory into Phantasmal's include/kernel (note
-- do *not* replace Phantasmal's config.h or other stuff in include's
top directory!).  Since the Kernel MUDLib changes with successive
versions of DGD you should use the one that comes with your DGD server
code and upgrade it when you upgrade DGD.  See the README files in
Phantasmal's "kernel" and "include/kernel" directories.

You may also want to copy the files from the DGD source tree in
doc/kfun to the Phantasmal directory under doc/kfun.

You'll need a version of DGD recent enough to have full support for
lightweight objects and multiple incoming network ports.  This MUDLib
has been tested with the DGD version(s) listed in TESTED_VERSIONS, and
the most recent 1.2.4X or 1.2.5X version is very likely to work with
the most recent version of Phantasmal.  Note that testing always uses
the latest versions, so it's possible that the lower-numbered DGD
versions in TESTED_VERSIONS don't work correctly any more, but they
have with a recent version of Phantasmal.  When in doubt, upgrade to
the latest DGD version listed in TESTED_VERSIONS, or to the most
recent version of DGD.

You'll need to make a .dgd file for Phantasmal.  Copy the mud.dgd file
in your DGD directory and change a couple of things.  Change the
directory it runs in and the port number (if you want).  The binary
port is for administrator login if something goes drastically wrong.
You'll never ordinarily use it.  You should also change the number of
sectors, called "swap_size", from 1024 to 2048, or perhaps even more.
Eventually you'll want to change more stuff in the .dgd file, but
you'll know enough about DGD to handle that yourself by the time it's
necessary.  In any case, *do* remember that the path specified in
phantasmal.dgd for the MUDLib's directory needs to be absolute, not
relative.  That means it should *start* with a slash.

Also in your phantasmal.dgd file, have a look at ed_tmpfile, swap_file
and dump_file.  Each of those is a relative path from your root
Phantasmal MUDLib directory, the one containing this file (INSTALL).
You may want to create a "../tmp" directory from here, or change those
paths to point somewhere else.

Once you have the MUD running, you should first log in as admin, then
make yourself a non-admin account to use.  When you make your new
account (referred to as "me" in this paragraph) you can grant it full
adminstrative access by typing "%grant me access" and "%grant me /
full".  This will be your main administrator account.  You can also
trivially make as many new unprivileged accounts as you feel like just
by logging in without bothering to grant them access.  Note the second
grant command makes the account able to pretty much crash your MUD or
destroy your data if the account owner feels like it, so use it
sparingly and only with people you want to have full administrative
access.  There will eventually be a less-privileged admin class
suitable for builders, but that hasn't yet been implemented.

Many of the standard Kernel MUDLib commands have been altered to have
a "%" in front of the name.  These are documented in the help. Type
"help" to start using player help, or "@help" to start using admin
help.  Player commands have no punctuation on the front and should all
be documented.  In case of conflict or uncertainty, the lists in
/usr/System/lib/wiztoollib.c and /data/phrase/user_cmds.unq are
definitive.
