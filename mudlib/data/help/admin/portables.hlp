~name{~enUS{portable,portables,item,items,carryable,carryables}}
~keywords{admin}
~desc{
  ~enUS{

Portables are basic carryable, movable and manipulable objects.  In
Phantasmal they are manipulated, from an admin viewpoint, by the
following commands:

@new_portable             Create a new portable
@delete_portable          Delete an old portable
@list_portables           List all portables
@save_portables           Save some portables to file
@load_portables           Load portables from a file
@set_portable_flag        Set portable attributes like "container"

}}


~name{~enUS{@set_port_flag, @set_port_flags, @set_portable_flag,
            @set_portable_flags, set_port_flag, set_port_flags,
            set_portable_flag, set_portable_flags, set_portflag,
            set_portflags, setportflag, setportflags, set port flags,
            set port flag, set portable flags, set portable flag,
            contain, cont, containment, container, containers,
            @container, open, open container, set container,
            set open,descless,nodesc,no_desc}}
~keywords{admin}
~desc{
  ~enUS{

The @set_port_flag (or @set_portable_flag) command sets flags on
portables, such as whether they are containers and whether they are
open.  For instance:

  @set_port_flag #237 cont true
  @set_port_flag #294 open 0
  @set_portable_flags #748 container no
  @set_portable_flags #748 nodesc yes

The values should be obviously true or false -- like "true", "false",
"yes", "no", 1, 0.  The first argument is, of course, the object
number of a portable registered with PORTABLED.  The middle argument
is a flag name, and can be "cont" or "container" to set whether the
object is a container, "open" to set whether it is currently open,
"nodesc" for scenery objects somewhat similar to details and keywords,
or other flag names.  There is currently no convenient way to get a
list of flag names.

}}


~name{~enUS{@new_portable, new_portable, newportable, @newportable,
            new portable, @portablenew, portablenew,
            portable_new, @portable_new, portable new,
            @new_port, new_port, newport, @newport,
            new port, @portnew, portnew,
            port_new, @port_new, port new}}
~keywords{admin}
~desc{
  ~enUS{

The @new_portable command creates a new portable object.  It takes
an optional number as an argument.  For instance:

@new_portable #571
@set_glance #571 'a bottle of rum'

}}


~name{~enUS{@delete_portable, delete_portable, deleteportable,
            @deleteportable, delete portable, @portabledelete,
            portabledelete, portable_delete, @portable_delete,
            portable delete, @delete_port, delete_port, deleteport,
            @deleteport, delete port, @portdelete, portdelete,
            port_delete, @port_delete, port delete, delete,
            destroy}}
~keywords{admin}
~desc{
  ~enUS{

The @delete_portable command deletes a portable object.  It takes
an optional number as an argument.  For instance:

@delete_portable #571

}}


~name{~enUS{@list_portable, list_portable, listportable, @listportable,
            list portable, @list_portables, list_portables, listportables,
            @listportables, list portables, @portablelist, portablelist,
            portable_list, @portable_list, portable list,
            @list_port, list_port, listport, @listport,
            list port, @list_ports, list_ports, listports,
            @listports, list ports, @portlist, portlist,
            port_list, @port_list, port list, list}}
~keywords{admin}
~desc{
  ~enUS{

The @list_portables command (and its shorter aliases, like @list_port)
lists all portables currently in the game.  It functions pretty much
like @list_rooms and @list_exits.

}}


~name{~enUS{@save_portables, @save_portable, save_portables,
            save_portable, @saveportables, @saveportable, saveportables,
            saveportable, portable save, portablesave, portable_save,
            save portables, save portable, @portable_save, @portablesave,
            @save_port, save_port, @saveport, saveport, port save,
            portsave, port_save, save port, @port_save, @portsave,
            save }}
~keywords{admin}
~desc{
  ~enUS{

@save_portable takes an absolute path and saves portables to that file
in a loadable format.  It defaults to saving all portables in the MUD.
It can also be given a series of additional arguments specifying
portable numbers to save.

Examples:
@save_portables /data/object/whole_mud.unq
@save_portables /data/object/my_zone.unq #503 #504 #505 #507 #523 #591

}}

~name{~enUS{@load_portables, @load_portable, load_portables,
            load_portable, @loadportables, @loadportable, loadportables,
            loadportable, portable load, portableload, portable_load,
            load portables, load portable, @portable_load, @portableload,
            @load_port, load_port, @loadport, loadport, port load,
            portload, port_load, load port, @port_load, @portload,
            load }}
~keywords{admin}
~desc{
  ~enUS{

@load_portable's first argument is an absolute path and it loads
portables found in that file.  It will either load all the portables
in the file, or if a sequence of numbers is given it will load only
portables with those numbers from the file.  None of the loaded
portable numbers must correspond to portables existing in the MUD.
This is one reason the "number" field is optional in the portable
structure.

Use this command with great caution to avoid large numbers of
duplicate portables.  Note also that numberless portables in the file
cannot be loaded with the second form of this command (the one that
specifies portable numbers).

Examples:
  @load_portables /data/object/testload.unq
  @load_portables /data/object/numtest.unq #234 #247 #212
}}
