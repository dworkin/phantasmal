How to Deal with Some Common Problems

Q: I try to run DGD, but I get things that look like this:

     Error within runtime_error:
     Compilation within compilation
     Compilation within compilation
     Config error: initialization failed

A: You probably haven't linked or copied an appropriate Kernel MUDLib
into the Kernel subdirectory of your installation of Phantasmal.  Make
sure that's done and try again.


Q: I try to run DGD, but I get things that look like this:

     /kernel/sys/driver.c, 1: cannot include "kernel/kernel.h"
     /kernel/sys/driver.c, 2: cannot include "kernel/objreg.h"
     /kernel/sys/driver.c, 3: cannot include "kernel/rsrc.h"
     /kernel/sys/driver.c, 4: cannot include "kernel/access.h"
     /kernel/sys/driver.c, 5: cannot include "kernel/user.h"
     /kernel/sys/driver.c, 6: cannot include "kernel/tls.h"
     Error within runtime_error:
     Compilation within compilation
     Compilation within compilation
     Config error: initialization failed

A: You copied the Kernel MUDLib into the right place, but forgot to
put its headers into the include/kernel directory.  Make sure that's
done correctly and try again.



Q: I run DGD and things look good except that there's no game.  What gives?

A: This is a MUD server.  You'll need to connect to it with a telnet
client on an appropriate port.  If you're unfamiliar with how the
whole process works you may find you're more comfortable trying out
CircleMUD or another fully developed MUD.  DGD and Phantasmal are
definitely intended for the experienced crowd.



Q: I run DGD and it gives me error messages about the version I'm using.
   What do I do?

A: If it says that this version of Phantasmal is not tested with DGD
beyond some version then you've either got a slightly old Phantasmal
or Felix has gotten a little ahead of me with his constant improvement
of DGD.  You can either use the recommended DGD version (look at
/usr/System/initd.c for the version check), or if things keep working
you can just ignore the error message, or remove it from
/usr/System/initd.c.

If it gives you a startup error that your version of DGD just isn't
good enough for it then you're going to need to upgrade to a later
version of DGD, probably an experimental one.  Check out
"http://phantasmal.sourceforge.net/DGD" and click on a link called
something like "Downloading, Compiling and Configuring DGD".


Q: I upgrade from one version of DGD to the next one and everybody
except admin stops being a wizard!  What gives?

A: The Kernel MUDLib stores its listing of who gets wizard privileges
in the file "kernel/data/access.data".  If you delete this then
everybody loses all their privileges.  One way to deal with it is to
manually reinstate everybody.  Another is to grab the file from your
old copy of DGD and restore it.

If you copy the kernel MUDLib stuff to where it should be rather than
symbolically linking it, and you copy the new version *over* the old
version, you won't get this problem (unless you overwrite the old
access.data with the new one).  Naturally that approach comes with its
own set of problems, including potential incompatibilities between
future versions of DGD (hey, it could happen).


Q: I run DGD and on startup (or %shutdown) I get a Fatal Error that
says "out of sectors".  How come?

A: In order to get DGD to run you must have set up a phantasmal.dgd
file somewhere, like the mud.dgd file that came with the Kernel MUDLib
in your copy of DGD.  In it, if you look hard, you'll find there's a
swap_size parameter, probably set to 1024 by default.  Try increasing
this number and trying the same thing again.

One way to make sure this doesn't happen is to type %status at the
command line of your MUD as an admin.  In the upper left under "Swap
device", "sectors" shows you how many sectors your MUD uses and how
many it can use.  You can also check out memory usage and number of
objects to see if they need to be increased.  This stuff is all 100%
the same as for the Kernel MUDLib, so the DGD mailing list is a good
place to ask about what it means and how you can play with it.  In any
case, this will tell you how close you are to exceeding your allowed
usage of various resources.  You may also find that as you come close
to the limit in them, it takes more ticks to do things.  If this
happens then you may run out of ticks before you run out of sectors,
dynamic memory or objects.
