* Stuff that now goes in a different section from CPL
Assignment return value is used (usually with if/while/etc)
#define'd symbolic Constants
Sec 1.5, word & character counting, basic file ops

-------------------------------------------------------------

* Chapters:
KFun reference
Driver Interface
Kernel Library
Parse_string()
Atomic Functions
DGD Editor


* Sections
DGD Implementation Details section?


* General LPC:
Varargs parameters and "..."
Floating-point misc
auto-typecasting, and the fact that LPC mostly doesn't
Differences from other LPC dialects (incl. shadowing)
Differences from C (static array size, assign-on-declaration, floating pt,
                    references vs pointers, etc)
Call_out statements, incl timing
garbage collection
Document efuns, maybe w/ examples
Cloning & destruction
  - When an object is destroyed, all refs turn to nil
  - When clone's master is destroyed, clones are orphaned
  - When LWO's master is destroyed, LWOs are destroyed
Backslash-escaping -- \n, \t, et cetera
How fast is <blank> (in terms of order notation)
How many ticks does <blank> take?


* DGD Driver/Auto interface:
Error handler
Static functions in AUTO object, special behavior


* DGD General:
Options for compiling DGD
Limits on # of objects, default and changeable
Precompiled DGD objects
parse_string
the editor
ASN numbers
Thread-local storage -- why it matters when everything looks single-threaded
Note:  all inheritance is virtual
rlimits and specifics of 'billing' ticks and stack depth
Don't put swapfile/dumpfile inside mudlib area for security reasons!


* Kernel Library:
Thread-local storage interface
Modified functions
Inheritance & Libraries
Events
Resource Management
ObjectD
kernel/lib/api objects
